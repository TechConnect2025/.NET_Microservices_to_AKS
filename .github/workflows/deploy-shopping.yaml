name: Build and Deploy to AKS

on:
  push:
    branches:
      - master
    paths:
      - 'Shopping.API/**'
      - 'Shopping.Client/**'
      - '.github/workflows/**'
      - 'manifests/**'
      - 'infra/**'

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    outputs:
      RESOURCE_GROUP: ${{ steps.create_group.outputs.RESOURCE_GROUP }}
      AKS_CLUSTER: ${{ steps.deploy_infra.outputs.AKS_CLUSTER }}
      REGISTRY_NAME: ${{ steps.deploy_infra.outputs.REGISTRY_NAME }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
        id-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Resource Group
      id: create_group
      run: |
        az group create --name <your-resource-group> --location <your-location>
        echo "##[set-output name=RESOURCE_GROUP;]<your-resource-group>"

    - name: Deploy Bicep files
      id: deploy_infra
      run: |
        az deployment group create --resource-group <your-resource-group> --template-file infra/main.bicep --parameters @infra/main.parameters.json
        echo "##[set-output name=AKS_CLUSTER;]<your-aks-cluster>"
        echo "##[set-output name=REGISTRY_NAME;]<your-registry-name>.azurecr.io"

  build-and-push:
    runs-on: ubuntu-latest
    needs: deploy-infra
    env:
      REGISTRY: ${{ needs.deploy-infra.outputs.REGISTRY_NAME }}
      IMAGE_API: shopping-api
      IMAGE_CLIENT: shopping-client
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push API Docker image
      run: |
        docker build -t $REGISTRY/$IMAGE_API:latest -f Shopping.API/Dockerfile .
        docker push $REGISTRY/$IMAGE_API:latest

    - name: Build and push Client Docker image
      run: |
        docker build -t $REGISTRY/$IMAGE_CLIENT:latest -f Shopping.Client/Dockerfile .
        docker push $REGISTRY/$IMAGE_CLIENT:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      RESOURCE_GROUP: ${{ needs.deploy-infra.outputs.RESOURCE_GROUP }}
      AKS_CLUSTER: ${{ needs.deploy-infra.outputs.AKS_CLUSTER }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Kubectl
      uses: azure/setup-kubectl@v2
      with:
        version: 'latest'

    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
        id-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Replace ACR Name in manifests
      run: find ./manifests -type f -name "*.yaml" -exec sed -i 's#<ACR Name>#$REGISTRY#g' {} +

    - name: Set up AKS
      run: |
        az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER

    - name: Deploy configurations and services to AKS
      run: |
        kubectl apply -f ./manifests